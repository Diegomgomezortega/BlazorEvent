<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">@titleName</a>
        <button class="navbar-toggler" @onclick="ToggleNavMenu" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <NavLink class="nav-link" Match="NavLinkMatch.All">
                        <li class="nav-item">
                            <button class="nav-link active btn-light" aria-current="page" @onclick="@(()=>SwitchToPage.InvokeAsync(0))" >Weather Forecast</button>
                        </li>
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link">
                        <button class="nav-link active btn-light" aria-current="page"  @onclick="@(()=>SwitchToPage.InvokeAsync(1))">Counter</button>
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link">
                        <button class="nav-link active btn-light" aria-current="page"  @onclick="@(()=>SwitchToPage.InvokeAsync(2))">Survey</button>
                    </NavLink>
                </li>
            </ul>
        </div>
    </div>
</nav>


@code {

    [Parameter] public string TitleName{ get; set; }
    [Parameter] public EventCallback<int> SwitchToPage {get;set;}
    private bool collapseNavMenu = true;
    public string titleName { get; set; }



    protected override async Task OnInitializedAsync()
    {
        titleName = TitleName;
    }

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}